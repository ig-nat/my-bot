# main.py
import asyncio
import logging
import sys
import platform
import os
from app.bot import main

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
def get_log_path():
    if platform.system() == "Windows":
        # –î–ª—è Windows - –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        return "bot.log"
    else:
        # –î–ª—è Linux/Synology NAS
        nas_path = "/volume2/RussOutdoor/bot.log"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è NAS
        if os.path.exists("/volume2/RussOutdoor/"):
            return nas_path
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            return "bot.log"

LOG_FILE_PATH = get_log_path()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(LOG_FILE_PATH, encoding='utf-8')
    ]
)

# –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
logging._levelToName = {
    logging.CRITICAL: '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê',
    logging.ERROR: '–û–®–ò–ë–ö–ê',
    logging.WARNING: '–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
    logging.INFO: '–ò–ù–§–û',
    logging.DEBUG: '–û–¢–õ–ê–î–ö–ê',
    logging.NOTSET: '–ù–ï –ó–ê–î–ê–ù–û',
}

# –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ aiogram
logging.getLogger('aiogram.event').setLevel(logging.WARNING)
logging.getLogger('aiogram.dispatcher').setLevel(logging.WARNING)
logging.getLogger('aiogram.bot.api').setLevel(logging.WARNING)
logging.getLogger('aiohttp.access').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

if __name__ == '__main__':
    try:
        logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞ –Ω–∞ {platform.system()}")
        logger.info(f"üìÑ –§–∞–π–ª –ª–æ–≥–∞: {LOG_FILE_PATH}")
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main()
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        # –í Windows –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ event loop –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
            if tasks:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(tasks)} –∑–∞–¥–∞—á...")
                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
                for task in tasks:
                    task.cancel()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
                loop = asyncio.get_event_loop()
                loop.run_until_complete(asyncio.gather(*tasks, return_exceptions=True))
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ event loop
            pass
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        
        logger.info("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
