# —ç—Ç–æ —Ç—É—Ç
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import ContentType, InputMediaPhoto, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, BufferedInputFile
from app.database import db
from aiogram.filters import Command
from app.redis_client import redis_client
import datetime




import os
import uuid
from app.utils import save_photo_file

import app.keyboards as kb
from app.config import GROUP_ID, GROUP_ID_2, GROUP_ID_3, ADMINS, TOKEN
from aiogram.fsm.storage.base import StorageKey
import logging
import time
import asyncio
from aiogram.exceptions import TelegramRetryAfter

import datetime
import sqlite3
from collections import defaultdict
import aiogram.exceptions
import json  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
from io import BytesIO  # ‚Üê –ò –≠–¢–£ –°–¢–†–û–ö–£

router = Router()
logger = logging.getLogger(__name__)
storage = {}


def restore_storage_smart():
    """–£–º–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: Redis ‚Üí –ë–î ‚Üí —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"""
    try:
        # 1. –ü—Ä–æ–±—É–µ–º Redis
        redis_data = {}
        if redis_client is not None:
            try:
                redis_data = redis_client.get_all_active_requests()
                logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω–æ {len(redis_data)} –∑–∞—è–≤–æ–∫ –∏–∑ Redis")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
        else:
            logger.info("üì° Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        db_data = {}
        try:
            with sqlite3.connect(db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT request_id, user_id, user_name, address, request_type, gid, is_accepted 
                    FROM requests 
                    WHERE status != 'completed'
                    ORDER BY created_at DESC
                ''')
                
                for row in cursor.fetchall():
                    request_id, user_id, user_name, address, request_type, gid, is_accepted = row
                    db_data[int(request_id)] = {
                        "user_id": user_id,
                        "user_name": user_name,
                        "adres": address,
                        "request_type": request_type or "regular",
                        "gid": gid or "",
                        "is_accepted": bool(is_accepted),
                        "is_completed": False,
                        "source": "database"
                    }
            
            logger.info(f"üíæ –ü–æ–ª—É—á–µ–Ω–æ {len(db_data)} –∑–∞—è–≤–æ–∫ –∏–∑ –ë–î")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ë–î: {str(e)}")
        
        # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (Redis –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
        storage.clear()
        storage.update(db_data)      # –°–Ω–∞—á–∞–ª–∞ –ë–î (–±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Redis –¥–∞–Ω–Ω—ã–º–∏ (–æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–º–∏)
        for req_id, req_data in redis_data.items():
            if req_id in storage:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ: –ë–î + Redis
                storage[req_id].update(req_data)
                storage[req_id]["source"] = "redis+database"
            else:
                # –¢–æ–ª—å–∫–æ –≤ Redis (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞)
                storage[req_id] = req_data
                storage[req_id]["source"] = "redis"
        
        logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(storage)} –∑–∞—è–≤–æ–∫ (Redis: {len(redis_data)}, –ë–î: {len(db_data)})")
        
        # 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Redis —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if redis_client is not None and storage:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ Redis
                active_requests = {k: v for k, v in storage.items() if not v.get("is_completed", False)}
                redis_client.save_all_active_requests(active_requests)
                logger.info(f"üì° Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω ({len(active_requests)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫)")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å Redis: {str(e)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")

# –í—ã–∑—ã–≤–∞–µ–º —É–º–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
restore_storage_smart()


def sync_storage_to_both(request_id, request_data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –≤ Redis –ò –ë–î"""
    try:
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –≤ Redis (–±—ã—Å—Ç—Ä–æ)
        if redis_client is not None:
            try:
                redis_client.save_request(str(request_id), request_data)
                logger.debug(f"üì° –ó–∞—è–≤–∫–∞ {request_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ Redis")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É {request_id} –≤ Redis: {str(e)}")
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î (–Ω–∞–¥–µ–∂–Ω–æ) - –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω—ã–µ
        if request_data.get("user_id") and request_data.get("user_name"):
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                db.save_request(
                    request_id=str(request_id),
                    user_id=request_data.get("user_id"),
                    user_name=request_data.get("user_name"),
                    address=request_data.get("adres", ""),
                    request_type=request_data.get("request_type", "regular")
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º GiD –µ—Å–ª–∏ –µ—Å—Ç—å
                if request_data.get("gid"):
                    db.update_request_gid(str(request_id), request_data.get("gid"))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                if request_data.get("is_completed"):
                    db.update_request_status(str(request_id), "completed", "system")
                
                logger.debug(f"üíæ –ó–∞—è–≤–∫–∞ {request_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ë–î")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É {request_id} –≤ –ë–î: {str(e)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ {request_id}: {str(e)}")


def sync_storage_to_both(request_id, request_data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –≤ Redis –ò –ë–î"""
    try:
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –≤ Redis (–±—ã—Å—Ç—Ä–æ)
        if redis_client is not None:
            try:
                redis_client.save_request(str(request_id), request_data)
                logger.debug(f"üì° –ó–∞—è–≤–∫–∞ {request_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ Redis")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É {request_id} –≤ Redis: {str(e)}")
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î (–Ω–∞–¥–µ–∂–Ω–æ) - –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω—ã–µ
        if request_data.get("user_id") and request_data.get("user_name"):
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                db.save_request(
                    request_id=str(request_id),
                    user_id=request_data.get("user_id"),
                    user_name=request_data.get("user_name"),
                    address=request_data.get("adres", ""),
                    request_type=request_data.get("request_type", "regular")
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º GiD –µ—Å–ª–∏ –µ—Å—Ç—å
                if request_data.get("gid"):
                    db.update_request_gid(str(request_id), request_data.get("gid"))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                if request_data.get("is_completed"):
                    db.update_request_status(str(request_id), "completed", "system")
                
                logger.debug(f"üíæ –ó–∞—è–≤–∫–∞ {request_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ë–î")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É {request_id} –≤ –ë–î: {str(e)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ {request_id}: {str(e)}")

def log_user_action(user_id: int, user_name: str, action: str, details: str = ""):
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"[{timestamp}] üë§ {user_name} (ID: {user_id}) - {action}"
    if details:
        log_message += f" | {details}"
    
    logger.info(log_message)
    
    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    try:
        with open("user_actions.log", "a", encoding="utf-8") as f:
            f.write(log_message + "\n")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ user_actions.log: {str(e)}")



async def cleanup_completed_requests():
    """–û—á–∏—â–∞–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ storage"""
    completed_requests = []
    current_time = datetime.datetime.now()
    
    for req_id, req_data in list(storage.items()):
        if req_data.get("is_completed", False):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
            completed_at = req_data.get("completed_at")
            if completed_at and (current_time - completed_at).total_seconds() > 1800:  # 30 –º–∏–Ω—É—Ç
                completed_requests.append(req_id)
    
    for req_id in completed_requests:
        del storage[req_id]
    
    if completed_requests:
        logger.info(f"–û—á–∏—â–µ–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–∑ storage: {len(completed_requests)}")



# –î–æ–±–∞–≤–∏–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
async def send_message_with_retry(bot, chat_id, text, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    max_retries = 5
    for attempt in range(max_retries):
        try:
            return await bot.send_message(chat_id=chat_id, text=text, **kwargs)
        except Exception as e:
            if "retry after" in str(e).lower():
                retry_after = int(str(e).split("retry after")[1].split()[0].strip())
                logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ {retry_after} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(retry_after + 0.5)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                if attempt == max_retries - 1:
                    raise
                await asyncio.sleep(1)


async def safe_delete_message(bot, chat_id, message_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        return True
    except Exception as e:
        if "message to delete not found" in str(e).lower():
            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            return False
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {str(e)}")
        return False



# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
async def safe_send_media_group(bot, chat_id, media, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    max_retries = 3
    for attempt in range(max_retries):
        try:
            return await bot.send_media_group(chat_id=chat_id, media=media, **kwargs)
        except Exception as e:
            if "retry after" in str(e).lower():
                retry_after = int(str(e).split("retry after")[1].split()[0].strip())
                logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ {retry_after} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(retry_after + 0.5)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {str(e)}")
                if attempt == max_retries - 1:
                    raise
                await asyncio.sleep(1)

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ handlers.py –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è router





class Reg(StatesGroup):
    city = State()      # ‚Üê –ù–û–í–´–ô –®–ê–ì
    adres = State()     # ‚Üê –û–°–¢–ê–ï–¢–°–Ø
    photo = State()
    photo2 = State()
    photo3 = State()
    final_photo = State()


class Moderator1State(StatesGroup):
    waiting_for_gid = State()
    waiting_for_reason = State()


class Moderator2State(StatesGroup):
    waiting_for_final_approval = State()
    waiting_for_reject_reason = State()

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –≥–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥—Ä—É–≥–∏–µ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AdminState(StatesGroup):
    waiting_for_username = State()

class CancelRegistrationState(StatesGroup):
    waiting_for_reason = State()
# –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø–æ—Å–ª–µ class CancelRegistrationState)
class OpsReplacement(StatesGroup):
    city = State()      # ‚Üê –ù–û–í–û–ï –ü–û–õ–ï
    adres = State()
    ops_photo = State()
    screen_photo = State()
    final_photo = State()

class TvReplacement(StatesGroup):
    city = State()      # ‚Üê –ù–û–í–û–ï –ü–û–õ–ï
    adres = State()
    tv_photo = State()
    final_photo = State()

class StatsState(StatesGroup):
    waiting_for_start_date = State()
    waiting_for_end_date = State()

async def safe_delete_message(bot, chat_id: int, message_id: int) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.delete_message(
            chat_id=chat_id,
            message_id=message_id
        )
        return True
    except Exception as e:
        error_msg = str(e).lower()
        if "message to delete not found" in error_msg:
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        elif "message can't be deleted" in error_msg:
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)")
        elif "bad request" in error_msg:
            logger.debug(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {str(e)}")
        else:
            logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {str(e)}")
        return False

async def safe_edit_reply_markup(bot, chat_id: int, message_id: int, new_markup: InlineKeyboardMarkup) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    try:
        await bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=new_markup
        )
        return True
    except Exception as e:
        error_msg = str(e).lower()
        if "message is not modified" in error_msg:
            logger.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ –∏–º–µ–µ—Ç –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            return True
        elif "message to edit not found" in error_msg:
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        elif "message can't be edited" in error_msg:
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)")
            return False
        elif "bad request" in error_msg:
            logger.debug(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {str(e)}")
            return False
        else:
            logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}")
            return False



# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
async def with_rate_limit(func, *args, **kwargs):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    max_retries = 5
    for attempt in range(max_retries):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            if "retry after" in str(e).lower():
                retry_after = int(str(e).split("retry after")[1].split()[0].strip())
                logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ {retry_after} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(retry_after + 1)  # –î–æ–±–∞–≤–ª—è–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            else:
                if attempt == max_retries - 1:
                    raise
                await asyncio.sleep(1)




@router.message(Command("refresh"))
async def refresh_requests(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ) –∑–∞—è–≤–∫–∏
        active_requests = {}
        for req_id, req_data in storage.items():
            if isinstance(req_data, dict) and not req_data.get("is_completed", False):
                active_requests[req_id] = req_data

        if not active_requests:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return

        await message.answer(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {len(active_requests)} –∑–∞—è–≤–æ–∫...")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for request_id, request_data in active_requests.items():
            try:
                if "button_message_id" in request_data:
                    await safe_delete_message(
                        message.bot,
                        chat_id=GROUP_ID,
                        message_id=request_data["button_message_id"]
                    )
                if "media_group_ids" in request_data:
                    for msg_id in request_data["media_group_ids"]:
                        await safe_delete_message(
                            message.bot,
                            chat_id=GROUP_ID,
                            message_id=msg_id
                        )
                await asyncio.sleep(0.3)
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ
        updated_count = 0
        for request_id, request_data in list(active_requests.items()):
            try:
                if "media" not in request_data:
                    logger.warning(f"–ó–∞—è–≤–∫–∞ {request_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã—Ö")
                    continue

                adres = request_data.get("adres", "")
                user_name = request_data.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                
                if adres:
                    await send_message_with_retry(
                        message.bot,
                        chat_id=GROUP_ID,
                        text=f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_name}\n–ê–¥—Ä–µ—Å: {adres}"
                    )
                    await asyncio.sleep(0.5)

                sent_messages = await safe_send_media_group(
                    message.bot,
                    GROUP_ID,
                    media=request_data["media"]
                )

                media_group_ids = [msg.message_id for msg in sent_messages]

                keyboard = kb.moderator_full
                if request_data.get("is_accepted", False):
                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(text="‚Äî‚Äî‚Äî –ü–†–û–ë–õ–ï–ú–´ –°–û –°–í–Ø–ó–¨–Æ ‚Äî‚Äî‚Äî", callback_data="ignore")
                            ],
                            [
                                InlineKeyboardButton(text="üî¥ –ù–ï–¢ –°–í–Ø–ó–ò", callback_data="no_connection"),
                                InlineKeyboardButton(text="‚ö†Ô∏è –ü–õ–û–•–ê–Ø –°–í–Ø–ó–¨", callback_data="bad_connection")
                            ],
                            [
                                InlineKeyboardButton(text="üîÑ –°–ú–ï–ù–ê –ü–û–†–¢–ê", callback_data="change_port"),
                                InlineKeyboardButton(text="üîå –ü–ï–†–ï–ó–ê–ì–†–£–ó–ò –¢–í", callback_data="restart_tv")
                            ]
                        ]
                    )

                await asyncio.sleep(0.5)

                button_message = await send_message_with_retry(
                    message.bot,
                    GROUP_ID,
                    f"–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –æ—Ç {user_name}:",
                    reply_markup=keyboard,
                    reply_to_message_id=media_group_ids[0]
                )

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –ë–î —Å –Ω–æ–≤—ã–º request_id
                old_request_id = str(request_id)
                new_request_id = str(media_group_ids[0])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º request_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                try:
                    with sqlite3.connect(db.db_path) as conn:
                        cursor = conn.cursor()
                        cursor.execute('''
                            UPDATE requests 
                            SET request_id = ? 
                            WHERE request_id = ?
                        ''', (new_request_id, old_request_id))
                        conn.commit()
                        logger.info(f"–ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {old_request_id} -> {new_request_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {str(e)}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                new_request_data = {
                    **request_data,
                    "button_message_id": button_message.message_id,
                    "media_group_ids": media_group_ids
                }
                
                if adres:
                    new_request_data["adres"] = adres
                if user_name:
                    new_request_data["user_name"] = user_name
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É —Å –Ω–æ–≤—ã–º ID
                storage[media_group_ids[0]] = new_request_data
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if "user_id" in request_data:
                    user_id = request_data["user_id"]
                    try:
                        user_state = FSMContext(
                            storage=state.storage,
                            key=StorageKey(chat_id=user_id, user_id=user_id, bot_id=message.bot.id)
                        )
                        
                        current_state = await user_state.get_state()
                        if current_state == Reg.final_photo.state:
                            user_data = await user_state.get_data()
                            
                            user_data_updated = {}
                            for k, v in user_data.items():
                                if k not in ['group_message_id', 'adres']:
                                    user_data_updated[k] = v
                            
                            user_data_updated['group_message_id'] = media_group_ids[0]
                            if adres:
                                user_data_updated['adres'] = adres
                                
                            await user_state.update_data(**user_data_updated)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
                if request_id != media_group_ids[0]:
                    del storage[request_id]

                updated_count += 1
                await asyncio.sleep(2)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ {request_id}: {str(e)}")
                await asyncio.sleep(1)

        await send_message_with_retry(
            message.bot,
            chat_id=message.chat.id,
            text=f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {updated_count} –∏–∑ {len(active_requests)}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /refresh: {str(e)}")
        try:
            await send_message_with_retry(
                message.bot,
                chat_id=message.chat.id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫"
            )
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(e2)}")








# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    await message.answer("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb.admin_kb)


@router.message(Command("storage_info"))
async def storage_info(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏–∑ state
    storage_type = type(state.storage).__name__
    
    if "Redis" in storage_type:
        status = "‚úÖ Redis –∞–∫—Ç–∏–≤–µ–Ω - —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ"
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Redis
            if hasattr(state.storage, 'redis'):
                redis_info = await state.storage.redis.info()
                uptime = redis_info.get('uptime_in_seconds', 0)
                status += f"\n‚è±Ô∏è Redis —Ä–∞–±–æ—Ç–∞–µ—Ç: {uptime} —Å–µ–∫—É–Ω–¥"
        except Exception as e:
            status += f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Redis: {str(e)}"
    else:
        status = "‚ö†Ô∏è Memory Storage - —Å–æ—Å—Ç–æ—è–Ω–∏—è –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ"
    
    await message.answer(f"üóÑÔ∏è –¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {storage_type}\n{status}")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è"
@router.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è")
async def back_to_main(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
# –î–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics_menu(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb.stats_period_kb)

@router.callback_query(F.data == "stats_today")
async def show_stats_today(callback: CallbackQuery):
    try:
        stats = db.get_statistics_today()
        
        if not stats:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            return
        
        today = datetime.date.today().strftime("%d.%m.%Y")
        message_text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –°–ï–ì–û–î–ù–Ø ({today})**\n\n"
        message_text += f"üìù **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        message_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total']}\n"
        message_text += f"‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}\n"
        message_text += f"‚Ä¢ ‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats['pending']}\n\n"
        
        message_text += f"üîß **–ü–æ —Ç–∏–ø–∞–º —Ä–∞–±–æ—Ç:**\n"
        message_text += f"‚Ä¢ üì∫ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–æ–≤: {stats['regular']}\n"
        message_text += f"‚Ä¢ üîß –ó–∞–º–µ–Ω–∞ OPS: {stats['ops']}\n"
        message_text += f"‚Ä¢ üì∫ –ó–∞–º–µ–Ω–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤: {stats['tv']}\n\n"
        
        if stats['users']:
            message_text += "üë• **–ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:**\n"
            for user_data in stats['users']:
                user_name, total, completed, regular, ops, tv = user_data
                message_text += f"‚Ä¢ {user_name}: {total} –≤—Å–µ–≥–æ (‚úÖ{completed}) "
                message_text += f"[üì∫{regular} üîß{ops} üì∫{tv}]\n"
        
        await callback.message.edit_text(message_text, reply_markup=None)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data == "stats_all_time")
async def show_stats_all_time(callback: CallbackQuery):
    try:
        stats = db.get_statistics_all_time()
        
        if not stats:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        message_text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –í–°–ï –í–†–ï–ú–Ø**\n\n"
        message_text += f"üìù **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        message_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total']}\n"
        message_text += f"‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}\n"
        message_text += f"‚Ä¢ ‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats['pending']}\n\n"
        
        message_text += f"üîß **–ü–æ —Ç–∏–ø–∞–º —Ä–∞–±–æ—Ç:**\n"
        message_text += f"‚Ä¢ üì∫ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–æ–≤: {stats['regular']}\n"
        message_text += f"‚Ä¢ üîß –ó–∞–º–µ–Ω–∞ OPS: {stats['ops']}\n"
        message_text += f"‚Ä¢ üì∫ –ó–∞–º–µ–Ω–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤: {stats['tv']}\n\n"
        
        if stats['users']:
            message_text += "üë• **–ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:**\n"
            for user_data in stats['users']:
                user_name, total, completed, regular, ops, tv = user_data
                message_text += f"‚Ä¢ {user_name}: {total} –≤—Å–µ–≥–æ (‚úÖ{completed}) "
                message_text += f"[üì∫{regular} üîß{ops} üì∫{tv}]\n"
        
        await callback.message.edit_text(message_text, reply_markup=None)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data == "stats_custom_period")
async def start_custom_period(callback: CallbackQuery, state: FSMContext):
    await state.set_state(StatsState.waiting_for_start_date)
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2025"
    )
    await callback.answer()

@router.message(StatsState.waiting_for_start_date)
async def process_start_date(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await state.clear()
        return
    
    try:
        start_date = datetime.datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        await state.update_data(start_date=start_date)
        await state.set_state(StatsState.waiting_for_end_date)
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date.strftime('%d.%m.%Y')}\n\n"
            "üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 31.01.2025"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@router.message(StatsState.waiting_for_end_date)
async def process_end_date(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await state.clear()
        return
    
    try:
        end_date = datetime.datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        data = await state.get_data()
        start_date = data.get('start_date')
        
        if end_date < start_date:
            await message.answer("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
        stats = db.get_statistics_period(start_date, end_date)
        
        if not stats:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            await state.clear()
            return
        
        message_text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ü–ï–†–ò–û–î**\n"
        message_text += f"üìÖ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"
        message_text += f"üìù **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        message_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total']}\n"
        message_text += f"‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}\n"
        message_text += f"‚Ä¢ ‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats['pending']}\n\n"
        
        message_text += f"üîß **–ü–æ —Ç–∏–ø–∞–º —Ä–∞–±–æ—Ç:**\n"
        message_text += f"‚Ä¢ üì∫ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–æ–≤: {stats['regular']}\n"
        message_text += f"‚Ä¢ üîß –ó–∞–º–µ–Ω–∞ OPS: {stats['ops']}\n"
        message_text += f"‚Ä¢ üì∫ –ó–∞–º–µ–Ω–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤: {stats['tv']}\n\n"
        
        if stats['users']:
            message_text += "üë• **–ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:**\n"
            for user_data in stats['users']:
                user_name, total, completed, regular, ops, tv = user_data
                message_text += f"‚Ä¢ {user_name}: {total} –≤—Å–µ–≥–æ (‚úÖ{completed}) "
                message_text += f"[üì∫{regular} üîß{ops} üì∫{tv}]\n"
        
        await message.answer(message_text, reply_markup=kb.admin_kb)
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("reset_user"))
async def reset_user_state(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /reset_user <–∏–º—è>")
            return
        
        user_name = args[1].strip()
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
        user_found = False
        for req_id, req_data in list(storage.items()):
            if req_data.get("user_name") == user_name and not req_data.get("is_completed", False):
                user_id = req_data.get("user_id")
                if user_id:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_state = FSMContext(
                        storage=message.bot.fsm.storage,
                        key=StorageKey(chat_id=user_id, user_id=user_id, bot_id=message.bot.id)
                    )
                    await user_state.clear()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await message.bot.send_message(
                        chat_id=user_id,
                        text="üîÑ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=kb.main
                    )
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
                    req_data["is_completed"] = True
                    req_data["completed_at"] = datetime.datetime.now()
                    req_data["completed_by"] = "admin_reset"
                    
                    user_found = True
        
        if user_found:
            await message.answer(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ")
        else:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(Command("reset_all"))
async def reset_all_states(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", callback_data="confirm_reset_all"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset_all")
            ]
        ])
        
        await message.answer(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=confirm_kb
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.callback_query(F.data == "confirm_reset_all")
async def confirm_reset_all(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        reset_count = 0
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏
        for req_id, req_data in list(storage.items()):
            if not req_data.get("is_completed", False):
                user_id = req_data.get("user_id")
                if user_id:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_state = FSMContext(
                        storage=state.storage,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º storage –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ state
                        key=StorageKey(chat_id=user_id, user_id=user_id, bot_id=callback.bot.id)
                    )
                    await user_state.clear()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        await callback.bot.send_message(
                            chat_id=user_id,
                            text="üîÑ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                            reply_markup=kb.main
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
                    req_data["is_completed"] = True
                    req_data["completed_at"] = datetime.datetime.now()
                    req_data["completed_by"] = "admin_reset_all"
                    
                    reset_count += 1
        
        await callback.message.edit_text(
            f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {reset_count}",
            reply_markup=None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=kb.admin_kb)
        
        await callback.answer("‚úÖ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π",
            reply_markup=None
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.admin_kb)


@router.callback_query(F.data == "cancel_reset_all")
async def cancel_reset_all(callback: CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    await callback.message.edit_text(
        "‚ùå –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=None
    )
    
    await callback.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫–∏" (–∞–Ω–∞–ª–æ–≥ /refresh)
@router.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫–∏")
async def refresh_button(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é refresh_requests, –ø–µ—Ä–µ–¥–∞–≤–∞—è state
    await refresh_requests(message, state)


@router.message(F.text == '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞')
async def start_registration(message: Message, state: FSMContext):
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {message.from_user.id}) –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await state.set_state(Reg.city)  # ‚Üê –ò–ó–ú–ï–ù–ò–õ–ò: –±—ã–ª–æ Reg.adres
    await message.answer("üèôÔ∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb.cancel_kb)  # ‚Üê –ò–ó–ú–ï–ù–ò–õ–ò: –±—ã–ª–æ "–∞–¥—Ä–µ—Å"

# –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Reg.city)
async def save_city(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞")
        await state.clear()
        await message.answer("‚ùé –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    logger.info(f"üèôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤–≤–µ–ª –≥–æ—Ä–æ–¥: {message.text}")
    await state.update_data(city=message.text)
    await state.set_state(Reg.adres)  # ‚Üê –ü–ï–†–ï–•–û–î–ò–ú –ö –ê–î–†–ï–°–£
    await message.answer("‚úÖ –ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ü–í–ó:", reply_markup=kb.cancel_kb)


@router.message(F.text == '–∑–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
async def start_replacement(message: Message, state: FSMContext):
    # –î–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    if message.chat.type != 'private':
        return

    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {message.from_user.id}) –Ω–∞—á–∞–ª –∑–∞–º–µ–Ω—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
    await message.answer("üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–º–µ–Ω—ã:", reply_markup=kb.replacement_type_kb)

@router.message(F.text == '–∑–∞–º–µ–Ω–∞ OPS')
async def start_ops_replacement(message: Message, state: FSMContext):
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–±—Ä–∞–ª –∑–∞–º–µ–Ω—É OPS")
    await state.set_state(OpsReplacement.city)  # ‚Üê –ò–ó–ú–ï–ù–ò–õ–ò: –±—ã–ª–æ OpsReplacement.adres
    await message.answer("üèôÔ∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb.cancel_kb)  # ‚Üê –ò–ó–ú–ï–ù–ò–õ–ò: –±—ã–ª–æ "–∞–¥—Ä–µ—Å"


# –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã OPS
@router.message(OpsReplacement.city)
async def save_ops_city(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùé –ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    logger.info(f"üèôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤–≤–µ–ª –≥–æ—Ä–æ–¥ –¥–ª—è –∑–∞–º–µ–Ω—ã OPS: {message.text}")
    await state.update_data(city=message.text)
    await state.set_state(OpsReplacement.adres)  # ‚Üê –ü–ï–†–ï–•–û–î–ò–ú –ö –ê–î–†–ï–°–£
    await message.answer("‚úÖ –ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=kb.cancel_kb)


@router.message(F.text == '–∑–∞–º–µ–Ω–∞ –¢–µ–ª–µ–≤–∏–∑–æ—Ä–∞')
async def start_tv_replacement(message: Message, state: FSMContext):
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–±—Ä–∞–ª –∑–∞–º–µ–Ω—É —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞")
    await state.set_state(TvReplacement.city)  # ‚Üê –ò–ó–ú–ï–ù–ò–õ–ò: –±—ã–ª–æ TvReplacement.adres
    await message.answer("üèôÔ∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb.cancel_kb)  # ‚Üê –ò–ó–ú–ï–ù–ò–õ–ò: –±—ã–ª–æ "–∞–¥—Ä–µ—Å"


# –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã TV
@router.message(TvReplacement.city)
async def save_tv_city(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùé –ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    logger.info(f"üèôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤–≤–µ–ª –≥–æ—Ä–æ–¥ –¥–ª—è –∑–∞–º–µ–Ω—ã TV: {message.text}")
    await state.update_data(city=message.text)
    await state.set_state(TvReplacement.adres)  # ‚Üê –ü–ï–†–ï–•–û–î–ò–ú –ö –ê–î–†–ï–°–£
    await message.answer("‚úÖ –ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–µ–º–æ–Ω—Ç–∞:", reply_markup=kb.cancel_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã OPS
@router.message(OpsReplacement.adres)
async def save_ops_adres(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–º–µ–Ω—É OPS –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞")
        await state.clear()
        await message.answer("‚ùé –ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    logger.info(f"üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤–≤–µ–ª –∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–º–µ–Ω—ã OPS: {message.text}")
    await state.update_data(adres=message.text)
    await state.set_state(OpsReplacement.ops_photo)
    await message.answer("‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ OPS", reply_markup=kb.cancel_kb)

@router.message(OpsReplacement.ops_photo)
async def save_ops_photo(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùé –ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    if message.content_type == ContentType.PHOTO:
        if hasattr(message, 'media_group_id') and message.media_group_id:
            await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π, –∞ –Ω–µ –≥—Ä—É–ø–ø–æ–π.")
            return
        
        await state.update_data(ops_photo=message.photo[-1].file_id)
        await state.set_state(OpsReplacement.screen_photo)
        await message.answer("üì∏ –§–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ OPS –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –°–ò–†–ï–ù–ï–í–û–ì–û —ç–∫—Ä–∞–Ω–∞", reply_markup=kb.cancel_kb)
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ OPS.")

@router.message(OpsReplacement.screen_photo)
async def save_ops_screen_photo(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùé –ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    if message.content_type == ContentType.PHOTO:
        if hasattr(message, 'media_group_id') and message.media_group_id:
            await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π, –∞ –Ω–µ –≥—Ä—É–ø–ø–æ–π.")
            return
        
        try:
            data = await state.get_data()
            ops_photo = data.get('ops_photo')
            screen_photo = message.photo[-1].file_id
            adres = data.get('adres')

            if None in (ops_photo, screen_photo, adres):
                raise ValueError("–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")

            user_name = message.from_user.full_name

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ —Å –ø–æ–º–µ—Ç–∫–æ–π –ó–ê–ú–ï–ù–ê OPS
            await send_message_with_retry(
                message.bot,
                chat_id=GROUP_ID,
                text=f"üîß **–ó–ê–ú–ï–ù–ê OPS** üîß\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_name}\n–ê–¥—Ä–µ—Å: {adres}",
                reply_markup=ReplyKeyboardRemove()
            )

            media = [
                InputMediaPhoto(media=ops_photo, caption=f"üîß –ó–ê–ú–ï–ù–ê OPS - –°–µ—Ä–∏–π–Ω–∏–∫ OPS –æ—Ç {user_name}"),
                InputMediaPhoto(media=screen_photo, caption=f"üîß –ó–ê–ú–ï–ù–ê OPS - –§–æ—Ç–æ —ç–∫—Ä–∞–Ω–∞ –æ—Ç {user_name}")
            ]

            sent_messages = await safe_send_media_group(message.bot, GROUP_ID, media)
            media_group_ids = [msg.message_id for msg in sent_messages]

            button_message = await send_message_with_retry(
                message.bot,
                chat_id=GROUP_ID,
                text=f"üîß –ó–ê–ú–ï–ù–ê OPS - –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –æ—Ç {user_name}:",
                reply_markup=kb.moderator_full,
                reply_to_message_id=media_group_ids[0]
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ —Å –ø–æ–º–µ—Ç–∫–æ–π —Ç–∏–ø–∞ –∑–∞–º–µ–Ω—ã
            storage[media_group_ids[0]] = {
                "user_id": message.from_user.id,
                "user_name": user_name,
                "button_message_id": button_message.message_id,
                "is_accepted": False,
                "media": media,
                "media_group_ids": media_group_ids,
                "adres": adres,
                "replacement_type": "OPS"  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–º–µ–Ω—ã
            }

            if redis_client is not None:
                redis_client.save_request(str(media_group_ids[0]), storage[media_group_ids[0]])
            else:
                logger.debug("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞—è–≤–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Redis")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.save_request(
                request_id=str(media_group_ids[0]),
                user_id=message.from_user.id,
                user_name=user_name,
                address=adres,
                request_type="OPS"
            )

            db.save_request(
                request_id=str(media_group_ids[0]),
                user_id=message.from_user.id,
                user_name=user_name,
                address=adres,
                request_type="regular"
            )

            await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–º–µ–Ω—É OPS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ.", reply_markup=ReplyKeyboardRemove())
            await state.update_data(group_message_id=media_group_ids[0])
            await state.set_state(OpsReplacement.final_photo)

            logger.info(f"üìù –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–º–µ–Ω—É OPS –æ—Ç {user_name} —Å–æ–∑–¥–∞–Ω–∞ —Å –∞–¥—Ä–µ—Å–æ–º: {adres}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω—ã OPS: {str(e)}", exc_info=True)
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=kb.main)
            await state.clear()
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –°–ò–†–ï–ù–ï–í–û–ì–û —ç–∫—Ä–∞–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞
@router.message(TvReplacement.adres)
async def save_tv_adres(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–º–µ–Ω—É —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞")
        await state.clear()
        await message.answer("‚ùé –ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    logger.info(f"üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤–≤–µ–ª –∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞: {message.text}")
    await state.update_data(adres=message.text)
    await state.set_state(TvReplacement.tv_photo)
    await message.answer("‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞", reply_markup=kb.cancel_kb)



@router.message(TvReplacement.tv_photo)
async def save_tv_photo(message: Message, state: FSMContext):
    logger.info(f"üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ–Ω—ã –¢–í")
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùé –ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    if message.content_type == ContentType.PHOTO:
        logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {message.from_user.full_name}")
        
        if hasattr(message, 'media_group_id') and message.media_group_id:
            await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π, –∞ –Ω–µ –≥—Ä—É–ø–ø–æ–π.")
            return
        
        try:
            data = await state.get_data()
            logger.info(f"üîç –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
            
            tv_photo = message.photo[-1].file_id
            adres = data.get('adres')
            city = data.get('city', '')  # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
            user_name = message.from_user.full_name

            if not adres:
                raise ValueError("–ê–¥—Ä–µ—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
            full_address = f"{city}, {adres}" if city else adres

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –≤ GROUP_ID_2 (–º–∏–Ω—É—è GROUP_ID)
            await send_message_with_retry(
                message.bot,
                chat_id=GROUP_ID_2,
                text=f"üì∫ **–ó–ê–ú–ï–ù–ê –¢–ï–õ–ï–í–ò–ó–û–†–ê** üì∫\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_name}\n–ê–¥—Ä–µ—Å: {full_address}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞
            sent_message = await message.bot.send_photo(
                chat_id=GROUP_ID_2,
                photo=tv_photo,
                caption=f"üì∫ –ó–ê–ú–ï–ù–ê –¢–ï–õ–ï–í–ò–ó–û–†–ê - –°–µ—Ä–∏–π–Ω–∏–∫ –¢–í –æ—Ç {user_name}"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            storage[sent_message.message_id] = {
                "user_id": message.from_user.id,
                "user_name": user_name,
                "is_accepted": True,  # –°—Ä–∞–∑—É –ø—Ä–∏–Ω—è—Ç–∞
                "adres": adres,
                "city": city,
                "replacement_type": "TV",
                "is_completed": False
            }  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –ó–ê–ö–†–´–í–ê–Æ–©–£–Æ –°–ö–û–ë–ö–£!
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Redis –∏ –ë–î
            try:
                sync_storage_to_both(sent_message.message_id, storage[sent_message.message_id])
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ–Ω—ã –¢–í: {str(e)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.save_request(
                request_id=str(sent_message.message_id),
                user_id=message.from_user.id,
                user_name=user_name,
                address=full_address,
                request_type="TV"
            )

            # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–æ—Ç–æ
            await message.answer(
                "‚úÖ –§–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ. –ù–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–æ–π–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ —ç–∫—Ä–∞–Ω —Å —Ä–µ–∫–ª–∞–º–æ–π",
                reply_markup=kb.cancel_kb
            )
            
            await state.update_data(group_message_id=sent_message.message_id)
            await state.set_state(TvReplacement.final_photo)

            logger.info(f"üìù –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–º–µ–Ω—É —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞ –æ—Ç {user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ GROUP_ID_2 —Å –∞–¥—Ä–µ—Å–æ–º: {full_address}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω—ã —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞: {str(e)}", exc_info=True)
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=kb.main)
            await state.clear()
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ–Ω—ã OPS
@router.message(OpsReplacement.final_photo)
async def ops_final_step(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if data.get("final_photo_sent", False):
            await message.answer("‚è≥ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            return

        if message.content_type != ContentType.PHOTO:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            return

        group_message_id = data.get("group_message_id")
        adres = data.get("adres")

        if not group_message_id or not adres:
            raise ValueError("ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∞–¥—Ä–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        if group_message_id not in storage:
            await message.answer("‚ö†Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–º–µ–Ω—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º storage_data –ü–ï–†–ï–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        storage_data = storage.get(group_message_id)
        if not storage_data or not storage_data.get("is_accepted", False):
            await message.answer("‚è≥ –ó–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ!")
            return

        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å storage_data
        city = storage_data.get("city", "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
        gid = storage_data.get("gid", "GiD –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ ...


        
        
        photo_id = message.photo[-1].file_id
        user_name = message.from_user.full_name
        
        info_text = f"üîß **–ó–ê–ú–ï–ù–ê OPS** - –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç {user_name}\n–ê–¥—Ä–µ—Å: {adres}\nGiD: {gid}"
        
        try:
            await send_message_with_retry(
                message.bot,
                chat_id=GROUP_ID_3,
                text=info_text
            )
            
            await asyncio.sleep(0.5)
            
            sent_message = await message.bot.send_photo(
                chat_id=GROUP_ID_3,
                photo=photo_id,
                caption=f"üîß –ó–ê–ú–ï–ù–ê OPS - –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç {user_name}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—ã OPS: {str(e)}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        accept_button = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_final:{sent_message.message_id}"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_final:{sent_message.message_id}")
        ]])

        await asyncio.sleep(0.5)

        await send_message_with_retry(
            message.bot,
            chat_id=GROUP_ID_3,
            text=f"üîß –ó–ê–ú–ï–ù–ê OPS - –ó–∞—è–≤–∫–∞ –æ—Ç {user_name} –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:",
            reply_markup=accept_button,
            reply_to_message_id=sent_message.message_id
        )

        storage[sent_message.message_id] = {
            "user_id": message.from_user.id,
            "group_message_id": group_message_id,
            "is_accepted": True,
            "user_name": user_name,
            "adres": adres,
            "gid": gid,
            "replacement_type": "OPS"
        }

        await state.update_data(final_photo_sent=True, final_message_id=sent_message.message_id)
        await message.answer("‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—ã OPS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")

        logger.info(f"üì∏ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—ã OPS –æ—Ç {user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∞–¥—Ä–µ—Å–æ–º: {adres}, GiD: {gid}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—ã OPS: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞
@router.message(TvReplacement.final_photo)
async def tv_final_step(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if data.get("final_photo_sent", False):
            await message.answer("‚è≥ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            return

        if message.content_type != ContentType.PHOTO:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            return

        group_message_id = data.get("group_message_id")
        adres = data.get("adres")
        storage_data = storage.get(group_message_id)
        if not storage_data:
            await message.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        city = storage_data.get("city", "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")

        if not group_message_id or not adres:
            raise ValueError("ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∞–¥—Ä–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        if group_message_id not in storage:
            await message.answer("‚ö†Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–º–µ–Ω—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        photo_id = message.photo[-1].file_id
        user_name = message.from_user.full_name
        
        info_text = f"üì∫ **–ó–ê–ú–ï–ù–ê –¢–ï–õ–ï–í–ò–ó–û–†–ê** - –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç {user_name}\n–ê–¥—Ä–µ—Å: {adres}"
        
        try:
            await send_message_with_retry(
                message.bot,
                chat_id=GROUP_ID_3,
                text=info_text
            )
            
            await asyncio.sleep(0.5)
            
            sent_message = await message.bot.send_photo(
                chat_id=GROUP_ID_3,
                photo=photo_id,
                caption=f"üì∫ –ó–ê–ú–ï–ù–ê –¢–ï–õ–ï–í–ò–ó–û–†–ê - –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç {user_name}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—ã —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞: {str(e)}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        accept_button = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_final:{sent_message.message_id}"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_final:{sent_message.message_id}")
        ]])

        await asyncio.sleep(0.5)

        await send_message_with_retry(
            message.bot,
            chat_id=GROUP_ID_3,
            text=f"üì∫ –ó–ê–ú–ï–ù–ê –¢–ï–õ–ï–í–ò–ó–û–†–ê - –ó–∞—è–≤–∫–∞ –æ—Ç {user_name} –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:",
            reply_markup=accept_button,
            reply_to_message_id=sent_message.message_id
        )

        storage[sent_message.message_id] = {
            "user_id": message.from_user.id,
            "group_message_id": group_message_id,
            "is_accepted": True,
            "user_name": user_name,
            "adres": adres,
            "replacement_type": "TV"
        }

        await state.update_data(final_photo_sent=True, final_message_id=sent_message.message_id)
        await message.answer("‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—ã —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")

        logger.info(f"üì∏ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—ã —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞ –æ—Ç {user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∞–¥—Ä–µ—Å–æ–º: {adres}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—ã —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")




@router.message(Reg.adres)
async def save_adres(message: Message, state: FSMContext):
    # –î–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
    if message.chat.type != 'private':
        return
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞")
        await state.clear()
        await message.answer("‚ùé –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    logger.info(f"üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤–≤–µ–ª –∞–¥—Ä–µ—Å: {message.text}")
    await state.update_data(adres=message.text)
    await state.set_state(Reg.photo)
    await message.answer("‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –î–∞–ª–µ–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –°–ò–†–ï–ù–ï–í–û–ì–û —ç–∫—Ä–∞–Ω–∞", reply_markup=kb.cancel_kb)


@router.message(Reg.photo)
async def save_adres(message: Message, state: FSMContext):
    if message.chat.type != 'private':
        return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùé –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    if message.content_type == ContentType.PHOTO:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ
        if hasattr(message, 'media_group_id') and message.media_group_id:
            await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π, –∞ –Ω–µ –≥—Ä—É–ø–ø–æ–π.")
            return
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É
            photo = message.photo[-1]
            file = await message.bot.get_file(photo.file_id)
            file_bytes = BytesIO()
            await message.bot.download_file(file.file_path, destination=file_bytes)
            file_bytes.seek(0)
            data = file_bytes.read()
            saved_path = save_photo_file(data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –ò –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            await state.update_data(photo=message.photo[-1].file_id, photo_path=saved_path)
            await state.set_state(Reg.photo2)
            await message.answer("üì∏ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ –Ω–∞–∫–ª–µ–π–∫–∏ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞", reply_markup=kb.cancel_kb)
            
            logger.info(f"üì∏ –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –°–ò–†–ï–ù–ï–í–û–ì–û —ç–∫—Ä–∞–Ω–∞.")



@router.message(Reg.photo2)
async def save_adres(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùé –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    if message.content_type == ContentType.PHOTO:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ
        if hasattr(message, 'media_group_id') and message.media_group_id:
            await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π, –∞ –Ω–µ –≥—Ä—É–ø–ø–æ–π.")
            return
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É
            photo = message.photo[-1]
            file = await message.bot.get_file(photo.file_id)
            file_bytes = BytesIO()
            await message.bot.download_file(file.file_path, destination=file_bytes)
            file_bytes.seek(0)
            data = file_bytes.read()
            saved_path = save_photo_file(data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –ò –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            await state.update_data(photo2=message.photo[-1].file_id, photo2_path=saved_path)
            await state.set_state(Reg.photo3)
            await message.answer("üì∏ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ –Ω–∞–∫–ª–µ–π–∫–∏ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (–û–ü–°)", reply_markup=kb.cancel_kb)
            
            logger.info(f"üì∏ –í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –Ω–∞–∫–ª–µ–π–∫–∏ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞.")



@router.message(Reg.photo3)
async def save_photo3(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùé –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        return

    if message.content_type == ContentType.PHOTO:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ
        if hasattr(message, 'media_group_id') and message.media_group_id:
            await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π, –∞ –Ω–µ –≥—Ä—É–ø–ø–æ–π.")
            return
        
        try:
            data = await state.get_data()
            photo = data.get('photo')
            photo2 = data.get('photo2')
            photo3 = message.photo[-1].file_id
            adres = data.get('adres')
            city = data.get('city')  # ‚Üê –î–û–ë–ê–í–ò–õ–ò –ì–û–†–û–î

            if None in (photo, photo2, photo3, adres, city):  # ‚Üê –ü–†–û–í–ï–†–Ø–ï–ú –ì–û–†–û–î
                raise ValueError("–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")

            user_name = message.from_user.full_name

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ —Å –≥–æ—Ä–æ–¥–æ–º
            await send_message_with_retry(
                message.bot,
                chat_id=GROUP_ID,
                text=f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_name}\nüèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n–ê–¥—Ä–µ—Å: {adres}",  # ‚Üê –î–û–ë–ê–í–ò–õ–ò –ì–û–†–û–î
                reply_markup=ReplyKeyboardRemove()
            )

            media = [
                InputMediaPhoto(media=photo, caption=f"–§–æ—Ç–æ —ç–∫—Ä–∞–Ω–∞ –æ—Ç {user_name}"),
                InputMediaPhoto(media=photo2, caption=f"–°–µ—Ä–∏–π–Ω–∏–∫ –¢–í –æ—Ç {user_name}"),
                InputMediaPhoto(media=photo3, caption=f"–°–µ—Ä–∏–π–Ω–∏–∫ –ü–ö –æ—Ç {user_name}")
            ]

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
            sent_messages = await safe_send_media_group(message.bot, GROUP_ID, media)
            media_group_ids = [msg.message_id for msg in sent_messages]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            button_message = await send_message_with_retry(
                message.bot,
                chat_id=GROUP_ID,
                text=f"–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –æ—Ç {user_name}:",
                reply_markup=kb.moderator_full,
                reply_to_message_id=media_group_ids[0]
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ —Å –∞–¥—Ä–µ—Å–æ–º –ò –≥–æ—Ä–æ–¥–æ–º
            storage[media_group_ids[0]] = {
                "user_id": message.from_user.id,
                "user_name": user_name,
                "button_message_id": button_message.message_id,
                "is_accepted": False,
                "media": media,
                "media_group_ids": media_group_ids,
                "adres": adres,
                "city": city  # ‚Üê –î–û–ë–ê–í–ò–õ–ò –ì–û–†–û–î –í STORAGE
            }
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Redis –∏ –ë–î
            try:
                sync_storage_to_both(media_group_ids[0], storage[media_group_ids[0]])
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if redis_client is not None:
                try:
                    redis_client.save_request(str(media_group_ids[0]), storage[media_group_ids[0]])
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis: {str(e)}")
            else:
                logger.debug("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞—è–≤–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Redis")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.save_request(
                request_id=str(media_group_ids[0]),
                user_id=message.from_user.id,
                user_name=user_name,
                address=f"{city}, {adres}",  # ‚Üê –ì–û–†–û–î + –ê–î–†–ï–° –í –ë–î
                request_type="regular"
            )

            await message.answer(
                "‚úÖ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.update_data(group_message_id=media_group_ids[0])
            await state.set_state(Reg.final_photo)

            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≥–æ—Ä–æ–¥–æ–º
            logger.info(f"üìù –ó–∞—è–≤–∫–∞ –æ—Ç {user_name} —Å–æ–∑–¥–∞–Ω–∞ —Å –≥–æ—Ä–æ–¥–æ–º: {city}, –∞–¥—Ä–µ—Å–æ–º: {adres}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", exc_info=True)
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=kb.main)
            await state.clear()
    else:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.")




@router.message(F.text == "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
async def waiting_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state == Reg.final_photo.state:
        await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.")
    else:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.", reply_markup=kb.main)
        await state.clear()




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
@router.message(F.text.in_(['—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞', '–∑–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', '–∑–∞–º–µ–Ω–∞ OPS', '–∑–∞–º–µ–Ω–∞ –¢–µ–ª–µ–≤–∏–∑–æ—Ä–∞']))
async def ignore_menu_in_groups(message: Message):
    if message.chat.type != 'private':
        return

    # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö
    pass





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@router.message(F.text == "üîÅ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def reset_user_button(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    class AdminState(StatesGroup):
        waiting_for_username = State()
    
    await state.set_state(AdminState.waiting_for_username)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(AdminState.waiting_for_username)
async def process_username(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await state.clear()
        return
    
    user_name = message.text.strip()
    
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
        user_found = False
        for req_id, req_data in list(storage.items()):
            if req_data.get("user_name") == user_name and not req_data.get("is_completed", False):
                user_id = req_data.get("user_id")
                if user_id:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_state = FSMContext(
                        storage=state.storage,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º storage –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ state
                        key=StorageKey(chat_id=user_id, user_id=user_id, bot_id=message.bot.id)
                    )
                    await user_state.clear()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await message.bot.send_message(
                        chat_id=user_id,
                        text="üîÑ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=kb.main
                    )
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
                    req_data["is_completed"] = True
                    req_data["completed_at"] = datetime.datetime.now()
                    req_data["completed_by"] = "admin_reset"
                    
                    user_found = True
        
        if user_found:
            await message.answer(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ", reply_markup=kb.admin_kb)
        else:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", reply_markup=kb.admin_kb)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=kb.admin_kb)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ—Ö"
@router.message(F.text == "‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ—Ö")
async def reset_all_button(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", callback_data="confirm_reset_all"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset_all")
            ]
        ])
        
        await message.answer(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=confirm_kb
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", reply_markup=kb.admin_kb)


@router.callback_query(F.data == "confirm_reset_all")
async def confirm_reset_all(callback: CallbackQuery, state: FSMContext):  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä state
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        reset_count = 0
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏
        for req_id, req_data in list(storage.items()):
            if not req_data.get("is_completed", False):
                user_id = req_data.get("user_id")
                if user_id:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_state = FSMContext(
                        storage=state.storage,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º storage –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ state
                        key=StorageKey(chat_id=user_id, user_id=user_id, bot_id=callback.bot.id)
                    )
                    await user_state.clear()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        await callback.bot.send_message(
                            chat_id=user_id,
                            text="üîÑ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                            reply_markup=kb.main
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
                    req_data["is_completed"] = True
                    req_data["completed_at"] = datetime.datetime.now()
                    req_data["completed_by"] = "admin_reset_all"
                    
                    reset_count += 1
        
        await callback.message.edit_text(
            f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {reset_count}",
            reply_markup=None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=kb.admin_kb)
        
        await callback.answer("‚úÖ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π",
            reply_markup=None
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.admin_kb)

@router.callback_query(F.data == "cancel_reset_all")
async def cancel_reset_all(callback: CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    await callback.message.edit_text(
        "‚ùå –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.admin_kb)
    
    await callback.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.message(F.text == "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
async def export_button(message: Message):
    if message.from_user.id not in ADMINS:
        return
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞
    await export_data(message)

@router.message(F.text == "üßπ –û—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
async def cleanup_button(message: Message):
    if message.from_user.id not in ADMINS:
        return
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é cleanup_storage
    await cleanup_storage(message)



@router.callback_query(F.data == "cancel_registration")
async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    try:
        group_message_id = callback.message.reply_to_message.message_id

        if group_message_id not in storage:
            raise KeyError("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        user_id = storage[group_message_id]["user_id"]
        await state.update_data(group_message_id=group_message_id, user_id=user_id)

        try:
            await callback.bot.delete_message(
                chat_id=GROUP_ID,
                message_id=storage[group_message_id]["button_message_id"]
            )
        except Exception as e:
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {str(e)}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã
        await state.set_state(CancelRegistrationState.waiting_for_reason)
        await callback.message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@router.message(CancelRegistrationState.waiting_for_reason)
async def handle_cancel_reason(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        group_message_id = data.get("group_message_id")
        user_id = data.get("user_id")
        if not group_message_id or not user_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏–∑ –≥—Ä—É–ø–ø—ã
        if group_message_id in storage:
            try:
                # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
                for msg_id in storage[group_message_id].get("media_group_ids", []):
                    try:
                        await message.bot.delete_message(chat_id=GROUP_ID, message_id=msg_id)
                    except Exception as e:
                        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {str(e)}")
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                button_message_id = storage[group_message_id].get("button_message_id")
                if button_message_id:
                    try:
                        await message.bot.delete_message(chat_id=GROUP_ID, message_id=button_message_id)
                    except Exception as e:
                        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {str(e)}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = FSMContext(
            storage=state.storage,
            key=StorageKey(chat_id=user_id, user_id=user_id, bot_id=message.bot.id)
        )
        await user_state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {message.text}",
            reply_markup=kb.main
        )
        
        # –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        if group_message_id in storage:
            storage[group_message_id]["is_completed"] = True
            storage[group_message_id]["cancel_reason"] = message.text
        
        await message.answer("‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ù–µ —Ñ–ª—É–¥–∏! –º–µ—à–∞–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å")
        await state.clear()



@router.message(F.chat.id == GROUP_ID, Moderator1State.waiting_for_gid)
async def handle_gid(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        group_message_id = data.get("group_message_id")
        if not group_message_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            
        if group_message_id not in storage:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            await state.clear()
            return
            
        storage_data = storage.get(group_message_id)
        media = storage_data.get("media")
        user_name = storage_data.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        replacement_type = storage_data.get("replacement_type", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
        address = storage_data.get("adres", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
        city = storage_data.get("city", "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£

        if media:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π —Ç–∏–ø–∞ –∑–∞–º–µ–Ω—ã
                info_text = f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_name}\n–ê–¥—Ä–µ—Å: {address}"
                # –ò –æ–±–Ω–æ–≤–∏ –æ—Ç–ø—Ä–∞–≤–∫—É:
                info_text = f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_name}\nüèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n–ê–¥—Ä–µ—Å: {address}"  # ‚Üê –û–ë–ù–û–í–ò
                if replacement_type == "OPS":
                    info_text = f"üîß **–ó–ê–ú–ï–ù–ê OPS** üîß\n{info_text}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤
                await send_message_with_retry(
                    message.bot,
                    chat_id=GROUP_ID_2,
                    text=info_text
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –≤ –≥—Ä—É–ø–ø—É –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤
                sent_messages_group2 = await safe_send_media_group(message.bot, GROUP_ID_2, media)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GiD –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                gid_text = f"GiD: {message.text}"
                if replacement_type == "OPS":
                    gid_text = f"üîß –ó–ê–ú–ï–ù–ê OPS - {gid_text}"
                
                await send_message_with_retry(
                    message.bot,
                    chat_id=GROUP_ID_2,
                    text=gid_text,
                    reply_to_message_id=sent_messages_group2[0].message_id
                )
                
                logger.info(f"üì§ –ó–∞—è–≤–∫–∞ –æ—Ç {user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º —Å –∞–¥—Ä–µ—Å–æ–º: {address}, GiD: {message.text}, —Ç–∏–ø: {replacement_type or '–æ–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –≤ GROUP_ID_2: {str(e)}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GiD –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É
        main_gid_text = f"GiD: {message.text}"
        if replacement_type == "OPS":
            main_gid_text = f"üîß –ó–ê–ú–ï–ù–ê OPS - {main_gid_text}"
            
        await send_message_with_retry(
            message.bot,
            chat_id=GROUP_ID,
            text=main_gid_text,
            reply_to_message_id=group_message_id
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        storage[group_message_id]["is_accepted"] = True
        storage[group_message_id]["gid"] = message.text
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        sync_storage_to_both(group_message_id, storage[group_message_id])

        if redis_client is not None:
            redis_client.update_request(str(group_message_id), {

        "is_accepted": True,
        "gid": message.text
    })
        storage[group_message_id]["gid"] = message.text
        
        db.update_request_gid(str(group_message_id), message.text)
        user_id = storage[group_message_id]["user_id"]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = "‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ. –ù–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–æ–π–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ —ç–∫—Ä–∞–Ω —Å —Ä–µ–∫–ª–∞–º–æ–π"
        if replacement_type == "OPS":
            user_message = "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–º–µ–Ω—É OPS –æ–¥–æ–±—Ä–µ–Ω–∞! " + user_message
        
        await send_message_with_retry(
            message.bot,
            chat_id=user_id,
            text=user_message,
            reply_markup=kb.cancel_kb
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        connection_buttons = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å", callback_data="copy_address")
        ],
        [
            InlineKeyboardButton(text="‚Äî‚Äî‚Äî –ü–†–û–ë–õ–ï–ú–´ –°–û –°–í–Ø–ó–¨–Æ ‚Äî‚Äî‚Äî", callback_data="ignore")
        ],
        [
            InlineKeyboardButton(text="üî¥ –ù–ï–¢ –°–í–Ø–ó–ò", callback_data="no_connection"),
            InlineKeyboardButton(text="‚ö†Ô∏è –ü–õ–û–•–ê–Ø –°–í–Ø–ó–¨", callback_data="bad_connection")
        ],
        [
            InlineKeyboardButton(text="üîÑ –°–ú–ï–ù–ê –ü–û–†–¢–ê", callback_data="change_port"),
            InlineKeyboardButton(text="üîå –ü–ï–†–ï–ó–ê–ì–†–£–ó–ò –¢–í", callback_data="restart_tv")
        ],
        [
            InlineKeyboardButton(text="üí¨ –°–í–Ø–ó–¨ –° –ú–û–ù–¢–ê–ñ–ù–ò–ö–û–ú", callback_data="contact_user")
        ]
    ]
)


        
        try:
            button_message_id = storage_data.get("button_message_id")
            if button_message_id:
                success = await safe_edit_reply_markup(
                    message.bot,
                    GROUP_ID,
                    button_message_id,
                    connection_buttons
                )
                if not success:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É - —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {str(e)}")
            
        await message.answer("‚úÖ GiD –∏ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –∫ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º.")
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GiD: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ GiD. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()






@router.callback_query(F.data == "accept_registration")
async def accept_registration(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ reply_to_message
        if not callback.message or not callback.message.reply_to_message:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
            return
            
        group_message_id = callback.message.reply_to_message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if group_message_id not in storage:
            logger.warning(f"–ó–∞—è–≤–∫–∞ —Å ID {group_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
            
        data = storage[group_message_id]
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å–æ —Å–≤—è–∑—å—é
            connection_buttons = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚Äî‚Äî‚Äî –ü–†–û–ë–õ–ï–ú–´ –°–û –°–í–Ø–ó–¨–Æ ‚Äî‚Äî‚Äî", callback_data="ignore")
        ],
        [
            InlineKeyboardButton(text="üî¥ –ù–ï–¢ –°–í–Ø–ó–ò", callback_data="no_connection"),
            InlineKeyboardButton(text="‚ö†Ô∏è –ü–õ–û–•–ê–Ø –°–í–Ø–ó–¨", callback_data="bad_connection")
        ],
        [
            InlineKeyboardButton(text="üîÑ –°–ú–ï–ù–ê –ü–û–†–¢–ê", callback_data="change_port"),
            InlineKeyboardButton(text="üîå –ü–ï–†–ï–ó–ê–ì–†–£–ó–ò –¢–í", callback_data="restart_tv")
        ],
        [
            InlineKeyboardButton(text="üí¨ –°–í–Ø–ó–¨ –° –ú–û–ù–¢–ê–ñ–ù–ò–ö–û–ú", callback_data="contact_user")
        ]
    ]
)

            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            success = await safe_edit_reply_markup(
                callback.bot,
                GROUP_ID,
                data["button_message_id"],
                connection_buttons
            )
            
            if not success:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {str(e)}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_message_with_retry(
            callback.bot,
            chat_id=data["user_id"],
            text="‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=kb.cancel_kb
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        await send_message_with_retry(
            callback.bot,
            chat_id=GROUP_ID,
            text=f"‚úÖ –ü—Ä–∏–Ω—è–ª: {callback.from_user.full_name}",
            reply_to_message_id=group_message_id
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GiD
        await callback.message.answer("üìù –í–≤–µ–¥–∏ GiD:")
        await state.set_state(Moderator1State.waiting_for_gid)
        await state.update_data(group_message_id=group_message_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")


@router.message(Reg.final_photo)
async def final_step(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if data.get("final_photo_sent", False):
            await message.answer("‚è≥ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            return

        if message.content_type != ContentType.PHOTO:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            return

        group_message_id = data.get("group_message_id")
        adres = data.get("adres")
        city = data.get("city", "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")  # ‚Üê –ü–†–ê–í–ò–õ–¨–ù–û: –∏–∑ data, –∞ –Ω–µ storage_data

        if not group_message_id or not adres:
            raise ValueError("ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∞–¥—Ä–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –µ—ë —Å—Ç–∞—Ç—É—Å
        if group_message_id not in storage:
            await message.answer("‚ö†Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        storage_data = storage.get(group_message_id)  # ‚Üê –í–û–¢ –ì–î–ï –û–ü–†–ï–î–ï–õ–Ø–ï–¢–°–Ø storage_data
        if not storage_data or not storage_data.get("is_accepted", False):
            await message.answer("‚è≥ –ó–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ! ")
            return

        # –ü–æ–ª—É—á–∞–µ–º GiD –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
        gid = storage_data.get("gid", "GiD –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        photo_id = message.photo[-1].file_id
        user_name = message.from_user.full_name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞—è–≤–∫–µ –° –ì–û–†–û–î–û–ú
        info_text = f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç {user_name}\nüèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n–ê–¥—Ä–µ—Å: {adres}\nGiD: {gid}"
        
        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π


        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞—è–≤–∫–µ
            await send_message_with_retry(
                message.bot,
                chat_id=GROUP_ID_3,
                text=info_text
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            await asyncio.sleep(0.5)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
            sent_message = await message.bot.send_photo(
                chat_id=GROUP_ID_3,
                photo=photo_id,
                caption=f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç {user_name}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {str(e)}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        accept_button = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_final:{sent_message.message_id}"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_final:{sent_message.message_id}")
        ]])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ –∫ —Ñ–æ—Ç–æ
        await send_message_with_retry(
            message.bot,
            chat_id=GROUP_ID_3,
            text=f"–ó–∞—è–≤–∫–∞ –æ—Ç {user_name} –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:",
            reply_markup=accept_button,
            reply_to_message_id=sent_message.message_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞—è–≤–∫–µ
        storage[sent_message.message_id] = {
            "user_id": message.from_user.id,  # ‚Üê –ü–†–ê–í–ò–õ–¨–ù–û
            "group_message_id": group_message_id,
            "is_accepted": True,
            "user_name": user_name,
            "adres": adres,
            "gid": gid
        }




        # –í–ê–ñ–ù–û: –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        await state.update_data(final_photo_sent=True, final_message_id=sent_message.message_id)
        await message.answer("‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")

        logger.info(f"üì∏ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç {user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∞–¥—Ä–µ—Å–æ–º: {adres}, GiD: {gid}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")





@router.callback_query(F.data.startswith("accept_final:"))
async def accept_final_photo(callback: CallbackQuery, state: FSMContext):
    try:
        final_message_id = int(callback.data.split(":")[1])

        if final_message_id not in storage:
            logger.warning(f"–ó–∞—è–≤–∫–∞ —Å ID {final_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        storage_data = storage.get(final_message_id)
        user_id = storage_data.get("user_id")
        
        if not user_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")

        group_message_id = storage_data.get("group_message_id")
        user_name = storage_data.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        adres = storage_data.get("adres", "")
        gid = storage_data.get("gid", "")
        replacement_type = storage_data.get("replacement_type", "")
        
        # –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        moderator_name = callback.from_user.full_name
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏
        if replacement_type == "OPS":
            signature_text = f"üîß –ó–ê–ú–ï–ù–ê OPS - ‚úÖ –ü–†–ò–ù–Ø–¢–û\n"
        elif replacement_type == "TV":
            signature_text = f"üì∫ –ó–ê–ú–ï–ù–ê –¢–ï–õ–ï–í–ò–ó–û–†–ê - ‚úÖ –ü–†–ò–ù–Ø–¢–û\n"
        else:
            signature_text = f"üì∫ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –≠–ö–†–ê–ù–ê - ‚úÖ –ü–†–ò–ù–Ø–¢–û\n"
        
        signature_text += f"üë§ –ü—Ä–∏–Ω—è–ª: {moderator_name}\n"
        signature_text += f"üè† –ê–¥—Ä–µ—Å: {adres}\n"
        if gid:
            signature_text += f"üÜî GiD: {gid}\n"
        signature_text += f"üìÖ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤ GROUP_ID_3
        await send_message_with_retry(
            callback.bot,
            chat_id=GROUP_ID_3,
            text=signature_text,
            reply_to_message_id=final_message_id
        )
        
        # –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        if redis_client is not None:
            redis_client.complete_request(str(final_message_id))
            if group_message_id:
                redis_client.complete_request(str(group_message_id))

        storage[final_message_id]["moderator_name"] = moderator_name
        db.update_request_status(
            str(final_message_id), 
            "completed", 
            moderator_name
        )

        if group_message_id and group_message_id in storage:
            storage[group_message_id]["is_completed"] = True
            storage[group_message_id]["moderator_name"] = moderator_name
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ
            try:
                await safe_delete_message(
                    callback.bot,
                    chat_id=GROUP_ID,
                    message_id=storage[group_message_id]["button_message_id"]
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {str(e)}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        await safe_delete_message(
            callback.bot,
            chat_id=GROUP_ID_3,
            message_id=callback.message.message_id
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        success_message = "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        if replacement_type == "OPS":
            success_message = "üéâ –ó–∞–º–µ–Ω–∞ OPS —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        elif replacement_type == "TV":
            success_message = "üéâ –ó–∞–º–µ–Ω–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            
        await send_message_with_retry(
            callback.bot,
            chat_id=user_id,
            text=success_message,
            reply_markup=kb.main
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = FSMContext(
            storage=state.storage,
            key=StorageKey(chat_id=user_id, user_id=user_id, bot_id=callback.bot.id)
        )
        await user_state.clear()

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        logger.info(f"–ó–∞—è–≤–∫–∞ {final_message_id} –ø—Ä–∏–Ω—è—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {moderator_name}")
        
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏.")











@router.message(Command("cleanup"))
async def cleanup_storage(message: Message):
    """–û—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫"""
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
        
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –¥–æ –æ—á–∏—Å—Ç–∫–∏
        total_before = len(storage)
        completed_count = sum(1 for req in storage.values() if req.get("is_completed", False))
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏
        new_storage = {}
        for req_id, req_data in storage.items():
            if not req_data.get("is_completed", False):
                new_storage[req_id] = req_data
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        storage.clear()
        storage.update(new_storage)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        total_after = len(storage)
        removed = total_before - total_after
        
        await message.answer(
            f"üßπ –û—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"–ë—ã–ª–æ –∑–∞—è–≤–æ–∫: {total_before}\n"
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_count}\n"
            f"–£–¥–∞–ª–µ–Ω–æ: {removed}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {total_after}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")





# ========== –ö–û–ú–ê–ù–î–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò REDIS ==========

@router.message(Command("sync_force"))
async def force_sync(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        db_data = {}
        with sqlite3.connect(db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT request_id, user_id, user_name, address, request_type, gid, is_accepted 
                FROM requests 
                WHERE status != 'completed'
                ORDER BY created_at DESC
            ''')
            
            for row in cursor.fetchall():
                request_id, user_id, user_name, address, request_type, gid, is_accepted = row
                db_data[int(request_id)] = {
                    "user_id": user_id,
                    "user_name": user_name,
                    "adres": address,
                    "request_type": request_type or "regular",
                    "gid": gid or "",
                    "is_accepted": bool(is_accepted),
                    "is_completed": False
                }
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º storage
        storage.clear()
        storage.update(db_data)
        
        # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Redis
        redis_synced = 0
        if redis_client is not None:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                for req_id, req_data in storage.items():
                    redis_client.save_request(str(req_id), req_data)
                    redis_synced += 1
                    
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Redis: {str(e)}")
        
        await message.answer(
            f"‚úÖ **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:**\n\n"
            f"üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –ë–î: {len(db_data)} –∑–∞—è–≤–æ–∫\n"
            f"üß† –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Storage: {len(storage)} –∑–∞—è–≤–æ–∫\n"
            f"üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ Redis: {redis_synced} –∑–∞—è–≤–æ–∫"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")


@router.message(Command("redis_clear"))
async def clear_redis(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        if redis_client is None:
            await message.answer("‚ùå Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å Redis", callback_data="confirm_redis_clear"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_redis_clear")
            ]
        ])
        
        await message.answer(
            "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å Redis?\n\n"
            "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ Redis (–Ω–æ –ù–ï –∏–∑ –ë–î).\n"
            "–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/sync_force` –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
            reply_markup=confirm_kb
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("redis_info"))
async def redis_info(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        if redis_client is None:
            await message.answer("‚ùå Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis
        try:
            redis_data = redis_client.get_all_active_requests()
            redis_keys = len(redis_data)
            status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω"
            
        except Exception as e:
            redis_keys = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            status = f"üî¥ –û—à–∏–±–∫–∞: {str(e)}"
        
        await message.answer(
            f"üì° **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Redis:**\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {redis_keys}\n"
            f"Storage –∑–∞—è–≤–æ–∫: {len(storage)}\n\n"
            f"**–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
            f"‚Ä¢ `/redis_clear` - –æ—á–∏—Å—Ç–∏—Ç—å Redis\n"
            f"‚Ä¢ `/sync_force` - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n"
            f"‚Ä¢ `/sync_check` - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")










@router.message(Command("export"))
async def export_data(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with sqlite3.connect(db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT request_id, user_id, user_name, address, request_type, 
                       gid, status, created_at, completed_at, is_accepted, moderator_name
                FROM requests
                ORDER BY created_at DESC
            ''')
            
            rows = cursor.fetchall()
            
            export_data_list = []
            for row in rows:
                export_item = {
                    "request_id": row[0],
                    "user_id": row[1],
                    "user_name": row[2],
                    "address": row[3],
                    "type": row[4],
                    "gid": row[5],
                    "status": row[6],
                    "created_at": row[7],
                    "completed_at": row[8],
                    "is_accepted": bool(row[9]),
                    "moderator_name": row[10]
                }
                export_data_list.append(export_item)
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        json_data = json.dumps(export_data_list, ensure_ascii=False, indent=2)
        
        from aiogram.types import BufferedInputFile
        
        file_name = f"export_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        file_buffer = BufferedInputFile(
            file=json_data.encode('utf-8'),
            filename=file_name
        )
        
        await message.answer_document(
            document=file_buffer,
            caption=f"üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(export_data_list)}"
        )
        
        logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.full_name}, –∑–∞–ø–∏—Å–µ–π: {len(export_data_list)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")




@router.message(Command("sync_db"))
async def sync_database(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        synced_count = 0
        
        for req_id, req_data in storage.items():
            if isinstance(req_data, dict) and req_data.get("user_id"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ –ë–î
                with sqlite3.connect(db.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute('SELECT COUNT(*) FROM requests WHERE request_id = ?', (str(req_id),))
                    exists = cursor.fetchone()[0] > 0
                
                if not exists:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    db.save_request(
                        request_id=str(req_id),
                        user_id=req_data.get("user_id"),
                        user_name=req_data.get("user_name", ""),
                        address=req_data.get("adres", ""),
                        request_type=req_data.get("replacement_type", "regular")
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º GiD –µ—Å–ª–∏ –µ—Å—Ç—å
                    if req_data.get("gid"):
                        db.update_request_gid(str(req_id), req_data.get("gid"))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    if req_data.get("is_completed"):
                        db.update_request_status(str(req_id), "completed", "system")
                    
                    synced_count += 1
        
        await message.answer(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {synced_count}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–î: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")



@router.message(Command("sync"))
async def sync_storage_command(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º storage —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        db.sync_storage_to_db(storage)
        await message.answer("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")






@router.callback_query(F.data.startswith("reject_final:"))
async def reject_final_photo(callback: CallbackQuery, state: FSMContext):
    try:
        final_message_id = int(callback.data.split(":")[1])

        if final_message_id not in storage:
            logger.warning(f"–ó–∞—è–≤–∫–∞ —Å ID {final_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        storage_data = storage.get(final_message_id)
        user_id = storage_data.get("user_id")
        
        if not user_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")

        # –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        moderator_name = callback.from_user.full_name
        storage[final_message_id]["moderator_name"] = moderator_name

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await safe_delete_message(
            callback.bot,
            chat_id=GROUP_ID_3,
            message_id=callback.message.message_id
        )

        await state.set_state(Moderator2State.waiting_for_reject_reason)
        await state.update_data(
            final_message_id=final_message_id, 
            user_id=user_id,
            moderator_name=moderator_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        )

        await callback.message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")



@router.message(F.chat.id == GROUP_ID_3, Moderator2State.waiting_for_reject_reason)
async def handle_reject_reason(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        final_message_id = data.get("final_message_id")
        user_id = data.get("user_id")
        moderator_name = data.get("moderator_name", message.from_user.full_name)

        if not final_message_id or not user_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        storage_data = storage.get(final_message_id, {})
        user_name = storage_data.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        adres = storage_data.get("adres", "")
        gid = storage_data.get("gid", "")
        replacement_type = storage_data.get("replacement_type", "")

        # –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–∞–∑–∞
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏
        if replacement_type == "OPS":
            signature_text = f"üîß –ó–ê–ú–ï–ù–ê OPS - ‚ùå –û–¢–ö–õ–û–ù–ï–ù–û\n"
        elif replacement_type == "TV":
            signature_text = f"üì∫ –ó–ê–ú–ï–ù–ê –¢–ï–õ–ï–í–ò–ó–û–†–ê - ‚ùå –û–¢–ö–õ–û–ù–ï–ù–û\n"
        else:
            signature_text = f"üì∫ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –≠–ö–†–ê–ù–ê - ‚ùå –û–¢–ö–õ–û–ù–ï–ù–û\n"
        
        signature_text += f"üë§ –û—Ç–∫–ª–æ–Ω–∏–ª: {moderator_name}\n"
        signature_text += f"üè† –ê–¥—Ä–µ—Å: {adres}\n"
        if gid:
            signature_text += f"üÜî GiD: {gid}\n"
        signature_text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {message.text}\n"
        signature_text += f"üìÖ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤ GROUP_ID_3
        await send_message_with_retry(
            message.bot,
            chat_id=GROUP_ID_3,
            text=signature_text,
            reply_to_message_id=final_message_id
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–∞–∑–∞
        reject_message = f"‚ùå –í–∞—à–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {message.text}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ."
        
        await send_message_with_retry(
            message.bot,
            chat_id=user_id,
            text=reject_message,
            reply_markup=kb.cancel_kb
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = FSMContext(
            storage=state.storage,
            key=StorageKey(chat_id=user_id, user_id=user_id, bot_id=message.bot.id)
        )
        await user_state.update_data(final_photo_sent=False)

        await message.answer(f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–û—Ç–∫–ª–æ–Ω–∏–ª: {moderator_name}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        logger.info(f"–ó–∞—è–≤–∫–∞ {final_message_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {moderator_name}, –ø—Ä–∏—á–∏–Ω–∞: {message.text}")
        
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞.")
        await state.clear()



@router.callback_query(F.data == "bad_connection")
async def handle_bad_connection(callback: CallbackQuery):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ reply_to_message
        if not callback.message or not callback.message.reply_to_message:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
            return
            
        group_message_id = callback.message.reply_to_message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if group_message_id not in storage:
            logger.warning(f"–ó–∞—è–≤–∫–∞ —Å ID {group_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        user_id = storage[group_message_id]["user_id"]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
        check_connection_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –í–´–ü–û–õ–ù–ò–õ, –ü–†–û–í–ï–†–¨–¢–ï –°–í–Ø–ó–¨ –ï–©–Å –†–ê–ó", callback_data="check_connection_again")]
        ])

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        await send_message_with_retry(
            callback.bot,
            chat_id=user_id,
            text="‚ö†Ô∏è –°–≤—è–∑—å —Å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º –µ—Å—Ç—å, –ù–û –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Ä–∞–∑—ä—ë–º RJ45, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç.",
            reply_markup=check_connection_kb
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "status_messages" in storage[group_message_id]:
            for msg_id in storage[group_message_id]["status_messages"]:
                await safe_delete_message(callback.bot, GROUP_ID, msg_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_msg = await send_message_with_retry(
            callback.bot,
            chat_id=GROUP_ID,
            text=f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–æ—Ö–æ–π —Å–≤—è–∑–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–û—Ç–ø—Ä–∞–≤–∏–ª: {callback.from_user.full_name}",
            reply_to_message_id=group_message_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        storage[group_message_id]["status_messages"] = [status_msg.message_id]

        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–ª–æ—Ö–æ–π —Å–≤—è–∑–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–æ—Ö–æ–π —Å–≤—è–∑–∏: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data == "no_connection")
async def handle_no_connection(callback: CallbackQuery):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ reply_to_message
        if not callback.message or not callback.message.reply_to_message:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
            return
            
        group_message_id = callback.message.reply_to_message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if group_message_id not in storage:
            logger.warning(f"–ó–∞—è–≤–∫–∞ —Å ID {group_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        user_id = storage[group_message_id]["user_id"]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
        check_connection_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –í–´–ü–û–õ–ù–ò–õ, –ü–†–û–í–ï–†–¨–¢–ï –°–í–Ø–ó–¨ –ï–©–Å –†–ê–ó", callback_data="check_connection_again")]
        ])

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        await send_message_with_retry(
            callback.bot,
            chat_id=user_id,
            text="‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–≤—è–∑—å —Å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º. "
                 "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, "
                 "–ø—Ä–æ–∑–≤–æ–Ω–∏—Ç—å –≤–∏—Ç—É—é –ø–∞—Ä—É LAN-—Ç–µ—Å—Ç–µ—Ä–æ–º, "
                 "–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≤–æ–¥ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑—ä—ë–º –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ",
            reply_markup=check_connection_kb
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "status_messages" in storage[group_message_id]:
            for msg_id in storage[group_message_id]["status_messages"]:
                await safe_delete_message(callback.bot, GROUP_ID, msg_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_msg = await send_message_with_retry(
            callback.bot,
            chat_id=GROUP_ID,
            text=f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–≤—è–∑–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–û—Ç–ø—Ä–∞–≤–∏–ª: {callback.from_user.full_name}",
            reply_to_message_id=group_message_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        storage[group_message_id]["status_messages"] = [status_msg.message_id]

        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–≤—è–∑–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–≤—è–∑–∏: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "change_port")
async def handle_change_port(callback: CallbackQuery):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ reply_to_message
        if not callback.message or not callback.message.reply_to_message:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
            return
            
        group_message_id = callback.message.reply_to_message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if group_message_id not in storage:
            logger.warning(f"–ó–∞—è–≤–∫–∞ —Å ID {group_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        user_id = storage[group_message_id]["user_id"]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
        check_connection_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –í–´–ü–û–õ–ù–ò–õ, –ü–†–û–í–ï–†–¨–¢–ï –°–í–Ø–ó–¨ –ï–©–Å –†–ê–ó", callback_data="check_connection_again")]
        ])

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        await send_message_with_retry(
            callback.bot,
            chat_id=user_id,
            text="üîÑ –ü–æ–º–µ–Ω—è–π –ø–æ—Ä—Ç –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ",
            reply_markup=check_connection_kb
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "status_messages" in storage[group_message_id]:
            for msg_id in storage[group_message_id]["status_messages"]:
                await safe_delete_message(callback.bot, GROUP_ID, msg_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_msg = await send_message_with_retry(
            callback.bot,
            chat_id=GROUP_ID,
            text=f"üîÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–æ—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–û—Ç–ø—Ä–∞–≤–∏–ª: {callback.from_user.full_name}",
            reply_to_message_id=group_message_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        storage[group_message_id]["status_messages"] = [status_msg.message_id]

        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–º–µ–Ω—ã –ø–æ—Ä—Ç–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–º–µ–Ω—ã –ø–æ—Ä—Ç–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")




@router.callback_query(F.data == "restart_tv")
async def handle_restart_tv(callback: CallbackQuery):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ reply_to_message
        if not callback.message or not callback.message.reply_to_message:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
            return
            
        group_message_id = callback.message.reply_to_message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if group_message_id not in storage:
            logger.warning(f"–ó–∞—è–≤–∫–∞ —Å ID {group_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        user_id = storage[group_message_id]["user_id"]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
        check_connection_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –í–´–ü–û–õ–ù–ò–õ, –ü–†–û–í–ï–†–¨–¢–ï –°–í–Ø–ó–¨ –ï–©–Å –†–ê–ó", callback_data="check_connection_again")]
        ])

        await send_message_with_retry(
            callback.bot,
            chat_id=user_id,
            text="üîå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä:\n"
                 "1. –û—Ç–∫–ª—é—á–∏—Ç–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä –æ—Ç —ç–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç–∏ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥\n"
                 "2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä –∫ —ç–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç–∏ –∏ –≤–∫–ª—é—á–∏—Ç–µ –µ–≥–æ",
            reply_markup=check_connection_kb
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "status_messages" in storage[group_message_id]:
            for msg_id in storage[group_message_id]["status_messages"]:
                await safe_delete_message(callback.bot, GROUP_ID, msg_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_msg = await send_message_with_retry(
            callback.bot,
            chat_id=GROUP_ID,
            text=f"üîå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –¢–í –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–û—Ç–ø—Ä–∞–≤–∏–ª: {callback.from_user.full_name}",
            reply_to_message_id=group_message_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        storage[group_message_id]["status_messages"] = [status_msg.message_id]

        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¢–í")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¢–í: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data == "check_connection_again")
async def check_connection_again(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        # –ò—â–µ–º –∑–∞—è–≤–∫—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_request = None
        request_id = None
        
        for req_id, req_data in storage.items():
            if isinstance(req_data, dict) and req_data.get("user_id") == user_id and not req_data.get("is_completed", False):
                user_request = req_data
                request_id = req_id
                break
        
        if not user_request:
            await callback.answer("‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞—è–≤–∫–∞ –≤ storage
        if request_id not in storage:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
        connection_result_kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –°–í–Ø–ó–¨ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê", callback_data="connection_restored"),
                InlineKeyboardButton(text="‚ùå –°–í–Ø–ó–¨ –í–°–ï –ï–©–ï –ü–õ–û–•–ê–Ø", callback_data="connection_still_bad")
            ]
        ])
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "status_messages" in storage[request_id]:
            for msg_id in storage[request_id]["status_messages"]:
                await safe_delete_message(callback.bot, GROUP_ID, msg_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            status_msg = await send_message_with_retry(
                callback.bot,
                chat_id=GROUP_ID,
                text=f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.full_name} –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å —Å–Ω–æ–≤–∞",
                reply_markup=connection_result_kb,
                reply_to_message_id=request_id
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ—ë
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {request_id}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏: {str(e)}")
            status_msg = await send_message_with_retry(
                callback.bot,
                chat_id=GROUP_ID,
                text=f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.full_name} –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å —Å–Ω–æ–≤–∞\n(–ó–∞—è–≤–∫–∞ ID: {request_id})",
                reply_markup=connection_result_kb
            )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if request_id in storage:
            storage[request_id]["status_messages"] = [status_msg.message_id]
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await callback.message.edit_text(
                text=callback.message.text + "\n\n‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                reply_markup=None
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback.message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        
        await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except KeyError as e:
        logger.error(f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ storage: {str(e)}")
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@router.callback_query(F.data == "connection_restored")
async def connection_restored(callback: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏—â–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        group_message_id = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ reply_to_message
        if callback.message and callback.message.reply_to_message:
            group_message_id = callback.message.reply_to_message.message_id
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if not group_message_id or group_message_id not in storage:
            # –ò—â–µ–º ID –∑–∞—è–≤–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = callback.message.text or ""
            if "–ó–∞—è–≤–∫–∞ ID:" in message_text:
                try:
                    group_message_id = int(message_text.split("–ó–∞—è–≤–∫–∞ ID:")[1].strip().split(")")[0])
                except:
                    pass
        
        # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not group_message_id or group_message_id not in storage:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É, –≥–¥–µ –µ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for req_id, req_data in storage.items():
                if (isinstance(req_data, dict) and 
                    not req_data.get("is_completed", False) and 
                    "status_messages" in req_data and 
                    callback.message.message_id in req_data["status_messages"]):
                    group_message_id = req_id
                    break
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        if not group_message_id or group_message_id not in storage:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return
        
        user_id = storage[group_message_id]["user_id"]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–∂–∏–¥–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ cancel_kb
        await send_message_with_retry(
            callback.bot,
            chat_id=user_id,
            text="‚úÖ –°–≤—è–∑—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ.",
            reply_markup=kb.waiting_kb
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        storage[group_message_id]["is_accepted"] = True
       
        if redis_client is not None:
            redis_client.update_request(str(group_message_id), {

        "is_accepted": True,
           
        })
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "status_messages" in storage[group_message_id]:
            for msg_id in storage[group_message_id]["status_messages"]:
                await safe_delete_message(callback.bot, GROUP_ID, msg_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            final_status_msg = await send_message_with_retry(
                callback.bot,
                chat_id=GROUP_ID,
                text=f"‚úÖ –°–≤—è–∑—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.\n–ü—Ä–æ–≤–µ—Ä–∏–ª: {callback.from_user.full_name}",
                reply_to_message_id=group_message_id
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ—ë
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {group_message_id}: {str(e)}")
            final_status_msg = await send_message_with_retry(
                callback.bot,
                chat_id=GROUP_ID,
                text=f"‚úÖ –°–≤—è–∑—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.\n–ü—Ä–æ–≤–µ—Ä–∏–ª: {callback.from_user.full_name}\n(–ó–∞—è–≤–∫–∞ ID: {group_message_id})"
            )

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if group_message_id in storage:
            storage[group_message_id]["status_messages"] = [final_status_msg.message_id]
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await safe_delete_message(callback.bot, GROUP_ID, callback.message.message_id)
        
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω")
        
    except KeyError as e:
        logger.error(f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ storage: {str(e)}")
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "connection_still_bad")
async def connection_still_bad(callback: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏—â–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        group_message_id = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ reply_to_message
        if callback.message and callback.message.reply_to_message:
            group_message_id = callback.message.reply_to_message.message_id
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if not group_message_id or group_message_id not in storage:
            # –ò—â–µ–º ID –∑–∞—è–≤–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = callback.message.text or ""
            if "–ó–∞—è–≤–∫–∞ ID:" in message_text:
                try:
                    group_message_id = int(message_text.split("–ó–∞—è–≤–∫–∞ ID:")[1].strip().split(")")[0])
                except:
                    pass
        
        # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not group_message_id or group_message_id not in storage:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É, –≥–¥–µ –µ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for req_id, req_data in storage.items():
                if (isinstance(req_data, dict) and 
                    not req_data.get("is_completed", False) and 
                    "status_messages" in req_data and 
                    callback.message.message_id in req_data["status_messages"]):
                    group_message_id = req_id
                    break
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        if not group_message_id or group_message_id not in storage:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return
        
        user_id = storage[group_message_id]["user_id"]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
        check_connection_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –í–´–ü–û–õ–ù–ò–õ, –ü–†–û–í–ï–†–¨–¢–ï –°–í–Ø–ó–¨ –ï–©–Å –†–ê–ó", callback_data="check_connection_again")]
        ])
        
        await send_message_with_retry(
            callback.bot,
            chat_id=user_id,
            text="üò• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=check_connection_kb
        )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "status_messages" in storage[group_message_id]:
            for msg_id in storage[group_message_id]["status_messages"]:
                await safe_delete_message(callback.bot, GROUP_ID, msg_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            status_msg = await send_message_with_retry(
                callback.bot,
                chat_id=GROUP_ID,
                text=f"‚ùå –°–≤—è–∑—å –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n–ü—Ä–æ–≤–µ—Ä–∏–ª: {callback.from_user.full_name}",
                reply_to_message_id=group_message_id
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ—ë
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {group_message_id}: {str(e)}")
            status_msg = await send_message_with_retry(
                callback.bot,
                chat_id=GROUP_ID,
                text=f"‚ùå –°–≤—è–∑—å –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n–ü—Ä–æ–≤–µ—Ä–∏–ª: {callback.from_user.full_name}\n(–ó–∞—è–≤–∫–∞ ID: {group_message_id})"
            )

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if group_message_id in storage:
            storage[group_message_id]["status_messages"] = [status_msg.message_id]
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await safe_delete_message(callback.bot, GROUP_ID, callback.message.message_id)
        
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω")
        
    except KeyError as e:
        logger.error(f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ storage: {str(e)}")
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–æ—Ö–æ–π —Å–≤—è–∑–∏: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")









@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    await callback.answer()




# ‚Üê –í–°–¢–ê–í–¨ –°–Æ–î–ê –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
@router.callback_query(F.data == "copy_address")
async def copy_address(callback: CallbackQuery):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ reply_to_message
        if not callback.message or not callback.message.reply_to_message:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
            return
            
        group_message_id = callback.message.reply_to_message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if group_message_id not in storage:
            logger.warning(f"–ó–∞—è–≤–∫–∞ —Å ID {group_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        user_data = storage[group_message_id]
        adres = user_data.get("adres", "")
        
        if not adres:
            await callback.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –∞–¥—Ä–µ—Å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–µ
        copy_message = await callback.message.answer(
            f"üìã **–ê–¥—Ä–µ—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n`{adres}`\n\n"
            f"üëÜ *–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è*\n"
            f"üóëÔ∏è *–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥*",
            parse_mode="Markdown"
        )
        
        await callback.answer("üìã –ê–¥—Ä–µ—Å –≥–æ—Ç–æ–≤ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        await safe_delete_message(callback.bot, GROUP_ID, copy_message.message_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞")



@router.callback_query(F.data == "bad_connection")
async def handle_bad_connection(callback: CallbackQuery):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ reply_to_message
        if not callback.message or not callback.message.reply_to_message:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
            return
            
        group_message_id = callback.message.reply_to_message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if group_message_id not in storage:
            logger.warning(f"–ó–∞—è–≤–∫–∞ —Å ID {group_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        user_id = storage[group_message_id]["user_id"]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
        check_connection_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –í–´–ü–û–õ–ù–ò–õ, –ü–†–û–í–ï–†–¨–¢–ï –°–í–Ø–ó–¨ –ï–©–Å –†–ê–ó", callback_data="check_connection_again")]
        ])

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        await send_message_with_retry(
            callback.bot,
            chat_id=user_id,
            text="‚ö†Ô∏è –°–≤—è–∑—å —Å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º –µ—Å—Ç—å, –ù–û –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Ä–∞–∑—ä—ë–º RJ45, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç.",
            reply_markup=check_connection_kb
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "status_messages" in storage[group_message_id]:
            for msg_id in storage[group_message_id]["status_messages"]:
                await safe_delete_message(callback.bot, GROUP_ID, msg_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_msg = await send_message_with_retry(
            callback.bot,
            chat_id=GROUP_ID,
            text=f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–æ—Ö–æ–π —Å–≤—è–∑–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–û—Ç–ø—Ä–∞–≤–∏–ª: {callback.from_user.full_name}",
            reply_to_message_id=group_message_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        storage[group_message_id]["status_messages"] = [status_msg.message_id]

        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–ª–æ—Ö–æ–π —Å–≤—è–∑–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–æ—Ö–æ–π —Å–≤—è–∑–∏: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "contact_user")
async def contact_user(callback: CallbackQuery):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ reply_to_message
        if not callback.message or not callback.message.reply_to_message:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
            return
            
        group_message_id = callback.message.reply_to_message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if group_message_id not in storage:
            logger.warning(f"–ó–∞—è–≤–∫–∞ —Å ID {group_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        user_data = storage[group_message_id]
        user_id = user_data.get("user_id")
        user_name = user_data.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        if not user_id:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        user_link = f"tg://user?id={user_id}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É
        await send_message_with_retry(
            callback.bot,
            chat_id=GROUP_ID,
            text=f"üí¨ [{user_name}]({user_link}) ‚Üê {callback.from_user.first_name}",
            parse_mode="Markdown",
            reply_to_message_id=group_message_id,
            disable_web_page_preview=True
        )
        
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏ —Å –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–º: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")



# ========== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø REDIS ==========

@router.callback_query(F.data == "confirm_redis_clear")
async def confirm_redis_clear(callback: CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        if redis_client is not None:
            # –û—á–∏—â–∞–µ–º Redis (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ clear_all_requests)
            try:
                redis_client.clear_all_requests()
                await callback.message.edit_text("‚úÖ Redis –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            except AttributeError:
                # –ï—Å–ª–∏ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                await callback.message.edit_text("‚ö†Ô∏è –ú–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sync_force")
        else:
            await callback.message.edit_text("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        await callback.answer("‚úÖ Redis –æ—á–∏—â–µ–Ω")
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data == "cancel_redis_clear")
async def cancel_redis_clear(callback: CallbackQuery):
    await callback.message.edit_text("‚ùå –û—á–∏—Å—Ç–∫–∞ Redis –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer("‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ")




@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    try:
        current_state = await state.get_state()

        if not current_state:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        final_states = [Reg.final_photo.state, OpsReplacement.final_photo.state, TvReplacement.final_photo.state]
        
        if current_state in final_states:
            data = await state.get_data()
            group_message_id = data.get("group_message_id")

            if group_message_id and group_message_id in storage and storage.get(group_message_id, {}).get("is_accepted", False):
                await message.answer("‚ùå –ù–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ –æ—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!")
                return

        await state.clear()
        await message.answer("‚ùé –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        logger.info(f"–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



@router.message(Command("sync_check"))
async def check_sync(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        redis_count = 0
        db_count = 0
        
        # –°—á–∏—Ç–∞–µ–º Redis
        if redis_client is not None:
            try:
                redis_data = redis_client.get_all_active_requests()
                redis_count = len(redis_data)
            except:
                redis_count = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –°—á–∏—Ç–∞–µ–º –ë–î
        try:
            with sqlite3.connect(db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) FROM requests WHERE status != "completed"')
                db_count = cursor.fetchone()[0]
        except Exception as e:
            db_count = f"–û—à–∏–±–∫–∞: {str(e)}"
        
        await message.answer(
            f"üîÑ **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:**\n\n"
            f"üì° Redis: {redis_count} –∑–∞—è–≤–æ–∫\n"
            f"üíæ –ë–î: {db_count} –∑–∞—è–≤–æ–∫\n"
            f"üß† Storage: {len(storage)} –∑–∞—è–≤–æ–∫\n\n"
            f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sync_force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")


@router.message(Command("broadcast"))
async def broadcast_message(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.replace("/broadcast", "").strip()
    if not text:
        await message.answer("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_users = set()
    for req_data in storage.values():
        if isinstance(req_data, dict) and req_data.get("user_id"):
            active_users.add(req_data["user_id"])
    
    sent_count = 0
    for user_id in active_users:
        try:
            await message.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{text}"
            )
            sent_count += 1
            await asyncio.sleep(0.1)  # –ò–∑–±–µ–≥–∞–µ–º –ª–∏–º–∏—Ç–æ–≤
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
    
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")


@router.message(Command("monitor"))
async def system_monitor(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        import psutil
        import os
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        process = psutil.Process(os.getpid())
        bot_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        monitor_text = f"üñ•Ô∏è **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã:**\n\n"
        monitor_text += f"üíæ –û–ó–£: {memory.percent}% ({memory.used // 1024 // 1024} MB / {memory.total // 1024 // 1024} MB)\n"
        monitor_text += f"üíΩ –î–∏—Å–∫: {disk.percent}% ({disk.used // 1024 // 1024 // 1024} GB / {disk.total // 1024 // 1024 // 1024} GB)\n"
        monitor_text += f"‚ö° CPU: {cpu_percent}%\n\n"
        monitor_text += f"ü§ñ **–ë–æ—Ç:**\n"
        monitor_text += f"üìä –ü–∞–º—è—Ç—å –±–æ—Ç–∞: {bot_memory:.1f} MB\n"
        monitor_text += f"üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(storage)}\n"
        monitor_text += f"üóÑÔ∏è –†–∞–∑–º–µ—Ä –ë–î: {os.path.getsize(db.db_path) // 1024} KB"
        
        await message.answer(monitor_text)
        
    except ImportError:
        await message.answer("‚ùå –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")

@router.message(Command("clear_redis"))
async def clear_redis(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        if redis_client is not None:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∑–∞—è–≤–æ–∫
            keys = redis_client.redis.keys("request:*")
            if keys:
                redis_client.redis.delete(*keys)
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            redis_client.redis.delete("active_requests")
            
            await message.answer(f"‚úÖ Redis –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–π: {len(keys)}")
        else:
            await message.answer("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis")


@router.message()
async def other_messages(message: Message, state: FSMContext):
    if message.chat.type != 'private':
       return

    current_state = await state.get_state()

    if current_state:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ç–æ
        photo_states = [
            Reg.photo.state, Reg.photo2.state, Reg.photo3.state, Reg.final_photo.state,
            OpsReplacement.ops_photo.state, OpsReplacement.screen_photo.state, OpsReplacement.final_photo.state,
            TvReplacement.tv_photo.state, TvReplacement.final_photo.state
        ]
        
        if current_state in photo_states:
            await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        else:
            await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        return

    await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", reply_markup=kb.main)








# –î–æ–±–∞–≤—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
@router.message()
async def ignore_messages_in_groups(message: Message):
    if message.chat.type != 'private':
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    pass