# bot.py
import asyncio
import logging
import sys
import platform
import os
from aiogram import Bot, Dispatcher
from app.handlers import router  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∏–∑ handlers.py
from app.config import TOKEN, GROUP_ID, ADMINS
from aiogram.types import BotCommand, BotCommandScopeAllGroupChats
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage

import app.keyboards as kb

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
def get_log_path():
    if platform.system() == "Windows":
        # –î–ª—è Windows - –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        return "bot.log"
    else:
        # –î–ª—è Linux/Synology NAS
        nas_path = "/volume2/RussOutdoor/bot.log"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è NAS
        if os.path.exists("/volume2/RussOutdoor/"):
            return nas_path
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            return "bot.log"

LOG_FILE_PATH = get_log_path()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(LOG_FILE_PATH, encoding='utf-8')
    ]
)

# –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
logging._levelToName = {
    logging.CRITICAL: '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê',
    logging.ERROR: '–û–®–ò–ë–ö–ê',
    logging.WARNING: '–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
    logging.INFO: '–ò–ù–§–û',
    logging.DEBUG: '–û–¢–õ–ê–î–ö–ê',
    logging.NOTSET: '–ù–ï –ó–ê–î–ê–ù–û',
}

# –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ aiogram
logging.getLogger('aiogram.event').setLevel(logging.WARNING)
logging.getLogger('aiogram.dispatcher').setLevel(logging.WARNING)
logging.getLogger('aiogram.bot.api').setLevel(logging.WARNING)
logging.getLogger('aiohttp.access').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

async def set_group_commands(bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤"""
    commands = [
        BotCommand(command="refresh", description="–û–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫–∏"),
        BotCommand(command="admin", description="–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="cleanup", description="–û—á–∏—Å—Ç–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫"),
        BotCommand(command="reset_user", description="–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="reset_all", description="–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    ]
    await bot.set_my_commands(
        commands=commands,
        scope=BotCommandScopeAllGroupChats()
    )

async def send_admin_panel(bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –≥—Ä—É–ø–ø—É"""
    try:
        await bot.send_message(
            chat_id=GROUP_ID,
            text="üë®‚Äçüíº –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=kb.admin_kb
        )
        logger.info(f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É {GROUP_ID}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –≥—Ä—É–ø–ø—É: {str(e)}")

async def on_startup(bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ {platform.system()} –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    logger.info(f"üìÑ –§–∞–π–ª –ª–æ–≥–∞: {LOG_FILE_PATH}")

async def on_shutdown(bot, dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    if hasattr(bot, 'session') and bot.session is not None:
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
    try:
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        for task in tasks:
            task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if tasks:
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(tasks)} –∑–∞–¥–∞—á...")
            await asyncio.gather(*tasks, return_exceptions=True)
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ event loop
        pass
    
    logger.info("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def create_redis_storage():
    """–°–æ–∑–¥–∞–Ω–∏–µ Redis —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å fallback –Ω–∞ Memory"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º redis.asyncio –≤–º–µ—Å—Ç–æ aioredis
        import redis.asyncio as redis
        redis_client = redis.Redis.from_url("redis://localhost:6379", decode_responses=True)
        await redis_client.ping()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return RedisStorage(redis=redis_client)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({str(e)}), –∏—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage")
        return MemoryStorage()



async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    storage = await create_redis_storage()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    bot = Bot(token=TOKEN)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        dp = Dispatcher(storage=storage)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        dp.include_router(router)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
        await set_group_commands(bot)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await on_startup(bot)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –≥—Ä—É–ø–ø—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await send_admin_panel(bot)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
        logger.info("üì° –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞...")
        await dp.start_polling(bot)
    finally:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await on_shutdown(bot, dp)

if __name__ == '__main__':
    try:
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main
        asyncio.run(main())
    except KeyboardInterrupt:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Ctrl+C)
        logger.info('üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç
        logger.error(f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", exc_info=True)
